#!/usr/bin/env python3
# Generated by https://github.com/kyuridenamida/atcoder-tools
from typing import *
import collections
import functools
import itertools
import math
import sys

INF = float("inf")


def solve(N: int, M: int, p: "List[int]", S: "List[str]"):
    ac = [0 for _ in range(N)]
    for i in set(x[0] for x in zip(p, S) if x[1] == "AC"):
        ac[i - 1] = 1
    wa = 0
    for x in zip(p, S):
        ac[x[0] - 1] &= x[1] == "WA"
        wa += ac[x[0] - 1]
    return f'{len(set(x[0] for x in zip(p,S) if x[1] == "AC"))} {wa}'


def main():

    sys.setrecursionlimit(10 ** 6)

    def iterate_tokens():
        for line in sys.stdin:
            for word in line.split():
                yield word

    tokens = iterate_tokens()
    N = int(next(tokens))  # type: int
    M = int(next(tokens))  # type: int
    p = [int()] * (M)  # type: "List[int]"
    S = [str()] * (M)  # type: "List[str]"
    for i in range(M):
        p[i] = int(next(tokens))
        S[i] = next(tokens)
    print(f"{solve(N, M, p, S)}")


if __name__ == "__main__":
    main()
